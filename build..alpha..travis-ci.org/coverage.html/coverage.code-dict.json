{"/home/travis/build/npmtest/node-npmtest-lambda-local/test.js":"/* istanbul instrument in package npmtest_lambda_local */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lambda-local/lib.npmtest_lambda_local.js":"/* istanbul instrument in package npmtest_lambda_local */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_lambda_local = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_lambda_local = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-lambda-local/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-lambda-local && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_lambda_local */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_lambda_local\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_lambda_local.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_lambda_local.rollup.js'] =\n            local.assetsDict['/assets.npmtest_lambda_local.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_lambda_local.__dirname + '/lib.npmtest_lambda_local.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lambda-local/node_modules/lambda-local/index.js":"/*\n * configuration for lambda-local being called from a program.\n */\n\nvar LambdaLocal = require('./lib/lambdalocal.js');\nmodule.exports = LambdaLocal;\n\n","/home/travis/build/npmtest/node-npmtest-lambda-local/node_modules/lambda-local/lib/lambdalocal.js":"'use strict';\n\n/*\n * Lambda's Context object.\n * Refer to this documentation:\n * https://docs.aws.amazon.com/en_us/lambda/latest/dg/nodejs-prog-model-context.html\n */\n\nvar logger = require('winston');\n\nconst mute = require('mute'),\n    utils = require('./utils.js'),\n    _context = require('./context.js');\n    \nvar _setLogger = function(_logger){\n    if(_logger != null && typeof _logger.loggers != 'undefined'){\n        logger = _logger;\n    } else {\n        console.warn(\"Invalid logger object ! Using default logger\");\n    }\n}\n \nvar _getLogger = function() {\n    return logger;\n}\n\nvar _execute = function(opts) {\n    if (opts.callback) {\n        _executeSync.apply(this, [opts]);\n    } else {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            opts.callback = function (_err, _done) {\n                if (_err) {\n                    reject(_err);\n                }\n                resolve(_done);\n            };\n            _executeSync.apply(that, [opts]);\n        });\n    }\n};\n\nvar _executeSync = function(opts) {\n    var event = opts.event,\n        lambdaFunc = opts.lambdaFunc,\n        lambdaPath = opts.lambdaPath,\n        lambdaHandler = opts.lambdaHandler || 'handler',\n        profilePath = opts.profilePath,\n        profileName = opts.profileName,\n        region = opts.region || 'us-east-1',\n        environment = opts.environment,\n        callbackWaitsForEmptyEventLoop = opts.callbackWaitsForEmptyEventLoop || true,\n        timeoutMs = opts.timeoutMs || 3000,\n        muteLogs = opts.mute,\n        unmute = null,\n        callback = opts.callback;\n\n    if (lambdaFunc && lambdaPath) {\n        throw new SyntaxError(\"Cannot specify both lambdaFunc and lambdaPath !\");\n        return;\n    }\n        \n    if(muteLogs) {\n        unmute = mute();\n    }\n        \n    //load profile\n    if (profilePath) {\n        utils.loadAWSCredentials(profilePath, profileName);\n    }\n\n    // load event & context\n    var context = this.context;\n\n    context._initialize({\n        functionName: lambdaHandler,\n        awsRequestId: context.createInvokeId,\n        timeoutMs: timeoutMs,\n        callbackWaitsForEmptyEventLoop: callbackWaitsForEmptyEventLoop,\n        unmute: unmute,\n        logger: logger\n    });\n\n    // set environment variables before the require\n    process.env['AWS_REGION'] = region;\n    process.env['LAMBDA_TASK_ROOT'] = process.cwd();\n    process.env['NODE_PATH'] = utils.getAbsolutePath('node_modules');\n    process.env['LAMBDA_CONSOLE_SOCKET'] = 14;\n    process.env['LAMBDA_CONTROL_SOCKET'] = 11;\n    process.env['AWS_SESSION_TOKEN'] = context.awsRequestId; /*Just a random value...*/\n\n    // custom environment variables\n    if (environment != null) {\n      Object.keys(environment).forEach(function(key) {\n        process.env[key]=environment[key];\n      });\n    }\n\n    // load lambda function\n    if (!(lambdaFunc)){\n        lambdaFunc = require(utils.getAbsolutePath(lambdaPath));\n    }\n\n    // execute lambda function\n    logger.log('info', 'Logs');\n    logger.log('info', '------');\n    logger.log('info', 'START RequestId: ' + context.awsRequestId);\n\n    if(callback) context.callback = callback;\n    lambdaFunc[lambdaHandler](event, context, context.done);\n};\n\nmodule.exports = {\n    context: _context,\n    execute: _execute,\n    setLogger: _setLogger,\n    getLogger: _getLogger\n};\n","/home/travis/build/npmtest/node-npmtest-lambda-local/node_modules/lambda-local/lib/utils.js":"'use strict'\n\n/**\n * Requires\n */\n\nconst join = require('path').join;\n\n/**\n * utility functions\n */\n\nconst _hexChars = '0123456789abcdef'.split('');\n\nvar _generateRandomHex = function(length) {\n    var hexVal = '';\n    for (var i = 0; i < length; i++) {\n        hexVal += _hexChars[Math.floor(Math.random() * _hexChars.length)];\n    }\n    return hexVal;\n};\n\nvar _getAbsolutePath = function(path) {\n    var res = null,\n        homeDir = process.env.HOME || process.env.USERPROFILE;\n\t\t\n\tvar windowsRegex = /([A-Z|a-z]:\\\\[^*|\"<>?\\n]*)|(\\\\\\\\.*?\\\\.*)/;\n\t\t\n    if (path.match(/^\\//) || path.match(windowsRegex)) {\n\t\t//On Windows and linux\n        res = path;\n    } else {\n        if (path === '~') {\n\t\t\t//On linux only\n            res = homeDir;\n        } else if (path.slice(0, 2) !== '~/') {\n\t\t\t//On Windows and linux\n            res = join(process.cwd(), path);\n        } else {\n\t\t\t//On linux only\n            res = join(homeDir, path.slice(2));\n        }\n    }\n    return res;\n};\n\nvar _outputJSON = function(json, logger) {\n    logger.log('info', typeof json === 'object' ?\n        JSON.stringify(json, null, '\\t') : json);\n};\n\n//This will load aws credentials files\n//more infos:\n// - http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-config-files\nvar _loadAWSCredentials = function(path) {\n    //default parameter\n    var profileName = arguments.length <= 1 ||\n        arguments[1] === undefined ||\n        arguments[1] === null ? 'default' : arguments[1];\n\n    var fs = require('fs'),\n        dataRaw = fs.readFileSync(_getAbsolutePath(path)),\n        data = dataRaw.toString();\n\n    var regex = new RegExp('\\\\[' + profileName +\n        '\\\\](.|\\\\n|\\\\r\\\\n)*?aws_secret_access_key( ?)+=( ?)+(.*)'),\n        match;\n    if ((match = regex.exec(data)) !== null) {\n        process.env['AWS_SECRET_ACCESS_KEY'] = match[4];\n    } else {\n        console.log('WARNING: Couldn\\'t find the \\'aws_secret_access_key\\' field inside the file.');\n    }\n\n    regex = new RegExp('\\\\[' + profileName + '\\\\](.|\\\\n|\\\\r\\\\n)*?aws_access_key_id( ?)+=( ?)+(.*)');\n    if ((match = regex.exec(data)) !== null) {\n        process.env['AWS_ACCESS_KEY_ID'] = match[4];\n    } else {\n        console.log('WARNING: Couldn\\'t find the \\'aws_access_key_id\\' field inside the file.');\n    }\n};\n\nmodule.exports = {\n    hexChars: _hexChars,\n    generateRandomHex: _generateRandomHex,\n    getAbsolutePath: _getAbsolutePath,\n    outputJSON: _outputJSON,\n    loadAWSCredentials: _loadAWSCredentials\n};\n","/home/travis/build/npmtest/node-npmtest-lambda-local/node_modules/lambda-local/lib/context.js":"'use strict';\n\n/*\n * Lambda's Context object.\n * Refer to this documentation:\n * https://docs.aws.amazon.com/en_us/lambda/latest/dg/nodejs-prog-model-context.html\n */\n\nvar utils = require('./utils.js');\n\nvar logger,\n\tunmute;\n\n/*\n * doneStatus & postDone were minimum; probably defined internally in Lambda.\n */\nvar doneStatus = false;\nvar postDone = function(error, message) {};\n\n/*\n * Used to determine the getRemainingTimeInMillis()\n */\nvar startTime;\nvar timeout;\n\nfunction Context() {}\n\n/*\n * exports\n */\nmodule.exports = Context;\n\n/*\n * Context object properties\n */\nContext.callbackWaitsForEmptyEventLoop = true;\nContext.functionName = '';\nContext.functionVersion = '1';\nContext.invokedFunctionArn = 'a';\nContext.memoryLimitInMB = 1;\nContext.awsRequestId = '';\nContext.logGroupName = 'a';\nContext.logStreamName = null;\nContext.identity = null;\nContext.clientContext = null;\n\n/*\n * callback function called after done\n */\nContext.callback = function(result) {\n    return result;\n};\n\n/*\n * create random invokeid.\n * Assuming that invokeid follows the format:\n * 8hex-4hex-4hex-4hex-12hex\n */\nContext.createInvokeId = (function() {\n    return [\n        utils.generateRandomHex(8),\n        utils.generateRandomHex(4),\n        utils.generateRandomHex(4),\n        utils.generateRandomHex(4),\n        utils.generateRandomHex(12)\n    ].join('-');\n})();\n\n/*\n * Context initialization.\n * Called from lambda-local\n */\nContext._initialize = function(options) {\n    /* set time */\n    startTime = new Date().getTime();\n    timeout = options.timeoutMs;\n    \n    logger = options.logger;\n\tunmute = options.unmute;\n\n    /* set function name */\n    Context.functionName = options.functionName;\n\n    /* set requestid */\n    Context.awsRequestId = options.awsRequestId;\n\n    /* Set callbackWaitsForEmptyEventLoop */\n    Context.callbackWaitsForEmptyEventLoop = options.callbackWaitsForEmptyEventLoop;\n    return;\n};\n\n/*\n * This `done` method is directly extracted from source.\n */\nContext.done = function(err, message) {\n\tif(unmute != null) {unmute(); unmute = null;}\n    if (!Context.callbackWaitsForEmptyEventLoop) {\n        Context.callback(err, message);\n    }\n    logger.log('info', 'END');\n    if (err !== null) {\n        logger.log('error', 'Error');\n        logger.log('error', '------');\n        utils.outputJSON(err, logger);\n    } else {\n        logger.log('info', 'Message');\n        logger.log('info', '------');\n        utils.outputJSON(message, logger);\n    }\n    if (Context.callbackWaitsForEmptyEventLoop) {\n        Context.callback(err, message);\n    }\n};\n\n/*\n * `fail` method calls the `done` method\n */\nContext.fail = function(err) {\n\tif(unmute != null) {unmute(); unmute = null;}\n    logger.log('error', 'FAILING!!');\n    Context.done(err);\n};\n\n/*\n * `succeed` method calls the `done` method\n */\nContext.succeed = function(message) {\n\tif(unmute != null) {unmute(); unmute = null;}\n    Context.done(null, message);\n};\n\n/*\n * 'getRemainingTimeInMillis' method return time before task is killed\n */\nContext.getRemainingTimeInMillis = function() {\n    var now = new Date().getTime();\n    return (timeout + startTime - now);\n};\n","/home/travis/build/npmtest/node-npmtest-lambda-local/node_modules/lambda-local/env_lambda.js":"\"use strict\";\n\nconsole.log(\"outside...\");\nconsole.log(process.env[\"hoge1\"]);\n\nexports.handler = function(event, context, callback) {\n\tconsole.log(\"HELLO! 1\");\n\tconsole.log(\"env hoge1:\"+process.env[\"hoge1\"]);\n\tcallback(null, \"env hoge2:\"+process.env[\"hoge2\"]);\n}\n\n","/home/travis/build/npmtest/node-npmtest-lambda-local/node_modules/lambda-local/event.js":"{}\n","/home/travis/build/npmtest/node-npmtest-lambda-local/node_modules/lambda-local/event-samples/custom.js":"module.exports = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n};\n\n","/home/travis/build/npmtest/node-npmtest-lambda-local/node_modules/lambda-local/event-samples/dynamodb-update.js":"module.exports = {\n  \"source\": \"arn:aws:dynamodb:us-east-1:059493405231:table/update-streams-test/stream/a804b686-ba0c-3b4f-ba26-af2e5d3e16ea-09223370621958198992-89ff842d/\",\n  \"Records\": [\n    {\n      \"awsRegion\": \"us-east-1\",\n      \"dynamodb\": {\n        \"Keys\": {\n          \"ForumName\": {\n            \"S\": \"DynamoDB\"\n          },\n          \"Subject\": {\n            \"S\": \"DynamoDB Thread 3\"\n          }\n        },\n        \"NewImage\": {\n          \"Attribute_0\": {\n            \"S\": \"New_Value_0\"\n          },\n          \"Attribute_1\": {\n            \"S\": \"New_Value_1\"\n          },\n          \"key\": {\n            \"S\": \"key-value\"\n          },\n          \"range\": {\n            \"S\": \"range-value\"\n          }\n        },\n        \"SequenceNumber\": \"300000000000000499659\",\n        \"SizeBytes\": 41,\n        \"StreamViewType\": \"KEYS_ONLY\"\n      },\n      \"eventID\": \"e2fd9c34eff2d779b297b26f5fef4206\",\n      \"eventName\": \"INSERT\",\n      \"eventSource\": \"aws:dynamodb\",\n      \"eventTime\": 1414474536.43,\n      \"eventVersion\": \"1.0\"\n    },\n    {\n      \"awsRegion\": \"us-east-1\",\n      \"dynamodb\": {\n        \"Keys\": {\n          \"ForumName\": {\n            \"S\": \"DynamoDB\"\n          },\n          \"Subject\": {\n            \"S\": \"DynamoDB Thread 1\"\n          }\n        },\n        \"SequenceNumber\": \"400000000000000499660\",\n        \"SizeBytes\": 41,\n        \"StreamViewType\": \"KEYS_ONLY\"\n      },\n      \"eventID\": \"4b25bd0da9a181a155114127e4837252\",\n      \"eventName\": \"MODIFY\",\n      \"eventSource\": \"aws:dynamodb\",\n      \"eventTime\": 1414474536.43,\n      \"eventVersion\": \"1.0\"\n    },\n    {\n      \"awsRegion\": \"us-east-1\",\n      \"dynamodb\": {\n        \"Keys\": {\n          \"ForumName\": {\n            \"S\": \"DynamoDB\"\n          },\n          \"Subject\": {\n            \"S\": \"DynamoDB Thread 2\"\n          }\n        },\n        \"SequenceNumber\": \"500000000000000499661\",\n        \"SizeBytes\": 41,\n        \"StreamViewType\": \"KEYS_ONLY\"\n      },\n      \"eventID\": \"740280c73a3df7842edab3548a1b08ad\",\n      \"eventName\": \"REMOVE\",\n      \"eventSource\": \"aws:dynamodb\",\n      \"eventTime\": 1414474536.431,\n      \"eventVersion\": \"1.0\"\n    }\n  ]\n};\n\n","/home/travis/build/npmtest/node-npmtest-lambda-local/node_modules/lambda-local/event-samples/kinesis.js":"module.exports = {\n  \"Records\": [\n    {\n      \"kinesis\": {\n        \"partitionKey\": \"partitionKey-3\",\n        \"kinesisSchemaVersion\": \"1.0\",\n        \"data\": \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0IDEyMy4=\",\n        \"sequenceNumber\": \"49545115243490985018280067714973144582180062593244200961\"\n      },\n      \"eventSource\": \"aws:kinesis\",\n      \"eventID\": \"shardId-000000000000:49545115243490985018280067714973144582180062593244200961\",\n      \"invokeIdentityArn\": \"arn:aws:iam::059493405231:role/testLEBRole\",\n      \"eventVersion\": \"1.0\",\n      \"eventName\": \"aws:kinesis:record\",\n      \"eventSourceARN\": \"arn:aws:kinesis:us-east-1:35667example:stream/examplestream\",\n      \"awsRegion\": \"us-east-1\"\n    }\n  ]\n};\n\n","/home/travis/build/npmtest/node-npmtest-lambda-local/node_modules/lambda-local/event-samples/s3-put.js":"module.exports = {\n  \"Records\": [\n    {\n      \"eventVersion\": \"2.0\",\n      \"eventSource\": \"aws:s3\",\n      \"awsRegion\": \"us-east-1\",\n      \"eventTime\": \"1970-01-01T00:00:00.000Z\",\n      \"eventName\": \"ObjectCreated:Put\",\n      \"userIdentity\": {\n        \"principalId\": \"AIDAJDPLRKLG7UEXAMPLE\"\n      },\n      \"requestParameters\": {\n        \"sourceIPAddress\": \"127.0.0.1\"\n      },\n      \"responseElements\": {\n        \"x-amz-request-id\": \"C3D13FE58DE4C810\",\n        \"x-amz-id-2\": \"FMyUVURIY8/IgAtTv8xRjskZQpcIZ9KG4V5Wp6S7S/JRWeUWerMUE5JgHvANOjpD\"\n      },\n      \"s3\": {\n        \"s3SchemaVersion\": \"1.0\",\n        \"configurationId\": \"testConfigRule\",\n        \"bucket\": {\n          \"name\": \"sourcebucket\",\n          \"ownerIdentity\": {\n            \"principalId\": \"A3NL1KOZZKExample\"\n          },\n          \"arn\": \"arn:aws:s3:::mybucket\"\n        },\n        \"object\": {\n          \"key\": \"HappyFace.jpg\",\n          \"size\": 1024,\n          \"eTag\": \"d41d8cd98f00b204e9800998ecf8427e\"\n        }\n      }\n    }\n  ]\n};\n\n"}